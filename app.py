"""
This is main file for processing.
And is called from streamlit to show on the web UI.
"""


import streamlit as st
# from utils import LpMaximize, LpMinimize, LpProblem, LpStatus, LpVariable
from pulp import LpProblem, LpVariable
from utils import LpMaximize, LpMinimize, LpStatus, LpSolution


st.set_page_config(
    page_title="Gi·∫£i quy ho·∫°ch tuy·∫øn t√≠nh online",
    page_icon="üìî",
    layout="centered",
    initial_sidebar_state="collapsed",
)
st.title("Gi·∫£i quy ho·∫°ch tuy·∫øn t√≠nh online")

# Settings
st.markdown("## I. H∆∞·ªõng d·∫´n")
st.sidebar.title("‚öô C√†i ƒë·∫∑t")
st.sidebar.subheader("Th√†nh vi√™n")
st.sidebar.markdown("""
    | Name | Student ID | Leader | Note |
    |---|---|---|---|
    | Dinh Minh Chinh | 21280007 | x | |
    | Nguyen Trong Nhan | 21280038 | | |
""")


# Problem Type use 2 columns
st.markdown("### 1. Ch·ªçn lo·∫°i b√†i to√°n")
col1, col2 = st.columns(2)
with col1:
    st.markdown("C√≥ 2 lo·∫°i b√†i to√°n:")
    st.markdown("- **T·ªëi thi·ªÉu h√≥a**: T√¨m gi√° tr·ªã nh·ªè nh·∫•t c·ªßa h√†m m·ª•c ti√™u - Minimization")
    st.markdown("- **T·ªëi ∆∞u h√≥a**: T√¨m gi√° tr·ªã l·ªõn nh·∫•t c·ªßa h√†m m·ª•c ti√™u - Maximization")
    st.markdown("H√£y ch·ªçn lo·∫°i b√†i to√°n b·∫±ng c√°ch ch·ªçn m·ªôt trong 2 n√∫t b√™n c·∫°nh.")

# st.sidebar.markdown("### Ch·ªçn h√†m m·ª•c ti√™u")
with col2:
    problem_type = st.radio("Lo·∫°i b√†i to√°n:", ("Minimization", "Maximization"), index=0)

# Create problem instance
problem = None
if problem_type == "Maximization":
    problem = LpProblem("Linear_Programming_Problem", LpMaximize)
else:
    problem = LpProblem("Linear_Programming_Problem", LpMinimize)


# Number of Decision Variables
st.markdown("### 2. Ch·ªçn s·ªë l∆∞·ª£ng bi·∫øn")
st.markdown("H√£y k√©o th·∫£ thanh d∆∞·ªõi ƒë√¢y ƒë·∫øn s·ªë l∆∞·ª£ng bi·∫øn c·∫ßn t·∫°o. Sau ƒë√≥ ƒëi·ªÅn r√†ng bu·ªôc cho t·ª´ng bi·∫øn")

# st.sidebar.markdown("### Choose the number of decision variables:")
num_vars = st.slider("S·ªë l∆∞·ª£ng bi·∫øn", 1, 10, 2, 1)
cols = st.columns(num_vars)

# Create list var with num_vars elements
var = [None] * num_vars

# Create num_vars variables
for i in range(num_vars):
    with cols[i]:
        var_name = f"x{i+1}"

        var_lower_bound = None
        # Create a selectbox for lower bound
        option_lower_bound = st.selectbox(
            f"C·∫≠n d∆∞·ªõi c·ªßa bi·∫øn x{i+1}:",
            ("√Çm v√¥ c√πng", "Kh√°c"),
            index=1
        )
        if option_lower_bound == "Kh√°c":
            var_lower_bound = st.number_input(
                f"C·∫≠n d∆∞·ªõi c·ªßa bi·∫øn x{i+1}:", value=0
            )
        else:
            var_lower_bound = None

        var_upper_bound = None
        # Create a selectbox for upper bound
        option_upper_bound = st.selectbox(
            f"C·∫≠n tr√™n c·ªßa bi·∫øn x{i+1}:",
            ("D∆∞∆°ng v√¥ c√πng", "Kh√°c")
        )
        if option_upper_bound == "Kh√°c":
            var_upper_bound = st.number_input(
                f"C·∫≠n tr√™n c·ªßa bi·∫øn x{i+1}:", value=10
            )
        else:
            var_upper_bound = None

        # Write a latex equation lower bound <= variable <= upper bound
        if var_lower_bound is not None and var_upper_bound is not None:
            st.latex(f"{var_lower_bound} \\leq {var_name} \\leq {var_upper_bound}")
        elif var_lower_bound is not None:
            st.latex(f"{var_lower_bound} \\leq {var_name} \\leq \\infty")
        elif var_upper_bound is not None:
            st.latex(f"-\\infty \\leq {var_name} \\leq {var_upper_bound}")
        else:
            st.latex(f"-\\infty \\leq {var_name} \\leq \\infty")

        var[i] = LpVariable(var_name, lowBound=var_lower_bound, upBound=var_upper_bound)

# Objective Function
st.markdown("### 3. H√†m m·ª•c ti√™u")
col1, col2 = st.columns(2)

with col2:
    st.markdown("ƒêi·ªÅn h√†m m·ª•c ti√™u v√†o √¥ b√™n d∆∞·ªõi. H√£y s·ª≠ d·ª•ng c√°c bi·∫øn ƒë√£ t·∫°o ·ªü b∆∞·ªõc tr∆∞·ªõc.")
    st.markdown("V√≠ d·ª• mu·ªën nh·∫≠p h√†m m·ª•c ti√™u: -x1 - 3*x2")
    st.markdown("- C√°c d·∫•u nh√¢n (*) kh√¥ng ƒë∆∞·ª£c b·ªè qua")
    st.markdown("- C√°c c·∫•u gi·ªØa 2 bi·∫øn ph·∫£i c√°ch nhau b·ªüi d·∫•u c√°ch")
    st.markdown("- D·∫•u '-' ·ªü tr∆∞·ªõc bi·∫øn ƒë·∫ßu ti√™n kh√¥ng c·∫ßn d·∫•u c√°ch")

with col1:
    objective_function = ""
    # Create objective function input
    objective_function = st.text_input(
        "H√†m m·ª•c ti√™u (e.g. -x1 - 3*x2):", placeholder="-x1 - 3*x2"
    )

# Replace x1, x2, ... with the variables
for i in range(num_vars):
    objective_function = objective_function.replace(f"x{i+1}", f"var[{i}]")
# Add objective function to problem
if objective_function != "":
    problem += eval(objective_function)

# Add constraints
st.markdown("### 4. R√†ng bu·ªôc")
constraints = []
st.markdown("H√£y k√©o th·∫£ thanh d∆∞·ªõi ƒë√¢y ƒë·∫øn s·ªë l∆∞·ª£ng r√†ng bu·ªôc c·∫ßn t·∫°o.")
num_constraints = st.slider("S·ªë r√†ng bu·ªôc", 1, 10, 2, 1)
# Create num_constraints input
for i in range(num_constraints):
    constraints.append(
        st.text_input(
            f"R√†ng bu·ªôc {i+1} (e.g. 3*x1 + 4*x2 >= 10):", placeholder="3*x1 + 4*x2 >= 10"
        )
    )
# Replace x1, x2, ... with the variables
for i in range(num_vars):
    for j in range(num_constraints):
        constraints[j] = constraints[j].replace(f"x{i+1}", f"var[{i}]")
# Add constraints to problem
for constraint in constraints:
    if constraint is not None and constraint != "":
        problem += eval(constraint)


# Write the problem
st.markdown("## B√†i to√°n")
st.code(str(problem))


# Solve the LP problem
status = problem.solve()

# Result
st.markdown("## B√†i gi·∫£i")
st.info(f"Gi·∫£i ƒë∆∞·ª£c: {LpSolution[status]}")
if st.button("Click ƒë·ªÉ gi·∫£i b√†i to√°n"):
    st.balloons()
    st.info(f"Tr·∫°ng th√°i: {LpStatus[status]}")
    if status == 1: # Optimal
        st.markdown("#### Th√¥ng tin nghi·ªám:")
        for i in range(num_vars):
            st.markdown(f"- x{i+1} = {var[i].value()}")
        try:
            st.info(f"Nghi·ªám t·ªëi ∆∞u: {problem.objective.value()}")
        except Exception as e:
            st.exception(e)
        else:
            st.success("Gi·∫£i th√†nh c√¥ng!")
    elif status == -2: # Unbounded
        if problem_type == "Maximization":
            st.info(f"Gi√° tr·ªã t·ªëi ∆∞u: $\\infty$")
        else:
            st.info(f"Gi√° tr·ªã t·ªëi ∆∞u: $-\\infty$")

    if st.button("Gi·∫£i ti·∫øp"):
        st.experimental_rerun()
